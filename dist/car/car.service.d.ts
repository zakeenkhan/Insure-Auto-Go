import { UpdateCarDto } from './dto/update-car.dto';
import { PrismaService } from 'src/prisma/prisma.service';
import { Prisma } from '@prisma/client';
import { GetCarDto } from './dto/get-car.dto';
export declare class CarService {
    private prisma;
    constructor(prisma: PrismaService);
    create(createCarDto: Prisma.CarUncheckedCreateInput): Promise<{
        bookings: {
            id: number;
            clientId: number;
            carId: number;
            driverId: number | null;
            status: import(".prisma/client").$Enums.BookingStatus;
            isInsured: boolean | null;
            insurance: string | null;
            bookingDate: Date;
            startDate: Date;
            endDate: Date;
            totalPrice: number;
            isPaid: boolean | null;
            amountPaid: number | null;
            cancelledAt: Date | null;
            cancelledById: number | null;
            clientContactNo: string | null;
            createdAt: Date;
            updatedAt: Date;
        }[];
        _count: {
            bookings: number;
            owner: number;
            ratings: number;
        };
        ratings: {
            id: number;
            ratedById: number;
            driverId: number | null;
            bookingId: number;
            carId: number;
            rating: Prisma.Decimal;
            review: string | null;
            createdAt: Date;
            updatedAt: Date;
        }[];
        owner: {
            id: number;
            fullName: string | null;
            email: string;
            password: string;
            isVerified: boolean;
            role: string;
            profilePicture: string | null;
            cnic: string | null;
            phone: string | null;
            dob: Date | null;
            otp: number | null;
            averageRatingGiven: Prisma.Decimal | null;
            ratingCount: number | null;
            weightage: Prisma.Decimal | null;
            cnicPhoto: string | null;
            isSignUpVerified: boolean;
            createdAt: Date;
            updatedAt: Date;
        };
    } & {
        id: number;
        name: string;
        ownerId: number;
        carPicture: string | null;
        carPublished: Date;
        city: string | null;
        registrationNo: string | null;
        type: string | null;
        makeYear: string | null;
        capacity: number | null;
        Make: string | null;
        fuelType: import(".prisma/client").$Enums.FuelType | null;
        insured: boolean | null;
        rentPerDay: number | null;
        insuranceRequired: boolean | null;
        carTransmission: import(".prisma/client").$Enums.CarTransmission | null;
        averageRating: Prisma.Decimal | null;
        ratingCount: number | null;
        weightage: Prisma.Decimal | null;
        createdAt: Date;
        updatedAt: Date;
    }>;
    findAll(query: GetCarDto): Promise<{
        data: ({
            bookings: {
                id: number;
                clientId: number;
                carId: number;
                driverId: number | null;
                status: import(".prisma/client").$Enums.BookingStatus;
                isInsured: boolean | null;
                insurance: string | null;
                bookingDate: Date;
                startDate: Date;
                endDate: Date;
                totalPrice: number;
                isPaid: boolean | null;
                amountPaid: number | null;
                cancelledAt: Date | null;
                cancelledById: number | null;
                clientContactNo: string | null;
                createdAt: Date;
                updatedAt: Date;
            }[];
            _count: {
                bookings: number;
                owner: number;
                ratings: number;
            };
            ratings: {
                id: number;
                ratedById: number;
                driverId: number | null;
                bookingId: number;
                carId: number;
                rating: Prisma.Decimal;
                review: string | null;
                createdAt: Date;
                updatedAt: Date;
            }[];
            owner: {
                id: number;
                fullName: string | null;
                email: string;
                password: string;
                isVerified: boolean;
                role: string;
                profilePicture: string | null;
                cnic: string | null;
                phone: string | null;
                dob: Date | null;
                otp: number | null;
                averageRatingGiven: Prisma.Decimal | null;
                ratingCount: number | null;
                weightage: Prisma.Decimal | null;
                cnicPhoto: string | null;
                isSignUpVerified: boolean;
                createdAt: Date;
                updatedAt: Date;
            };
        } & {
            id: number;
            name: string;
            ownerId: number;
            carPicture: string | null;
            carPublished: Date;
            city: string | null;
            registrationNo: string | null;
            type: string | null;
            makeYear: string | null;
            capacity: number | null;
            Make: string | null;
            fuelType: import(".prisma/client").$Enums.FuelType | null;
            insured: boolean | null;
            rentPerDay: number | null;
            insuranceRequired: boolean | null;
            carTransmission: import(".prisma/client").$Enums.CarTransmission | null;
            averageRating: Prisma.Decimal | null;
            ratingCount: number | null;
            weightage: Prisma.Decimal | null;
            createdAt: Date;
            updatedAt: Date;
        })[];
        meta: {
            totalPages: number;
            totalRecords: number;
            currentPage: number;
        };
    }>;
    findOne(id: number): Promise<{
        bookings: {
            id: number;
            clientId: number;
            carId: number;
            driverId: number | null;
            status: import(".prisma/client").$Enums.BookingStatus;
            isInsured: boolean | null;
            insurance: string | null;
            bookingDate: Date;
            startDate: Date;
            endDate: Date;
            totalPrice: number;
            isPaid: boolean | null;
            amountPaid: number | null;
            cancelledAt: Date | null;
            cancelledById: number | null;
            clientContactNo: string | null;
            createdAt: Date;
            updatedAt: Date;
        }[];
        _count: {
            bookings: number;
            owner: number;
            ratings: number;
        };
        ratings: {
            id: number;
            ratedById: number;
            driverId: number | null;
            bookingId: number;
            carId: number;
            rating: Prisma.Decimal;
            review: string | null;
            createdAt: Date;
            updatedAt: Date;
        }[];
        owner: {
            id: number;
            fullName: string | null;
            email: string;
            password: string;
            isVerified: boolean;
            role: string;
            profilePicture: string | null;
            cnic: string | null;
            phone: string | null;
            dob: Date | null;
            otp: number | null;
            averageRatingGiven: Prisma.Decimal | null;
            ratingCount: number | null;
            weightage: Prisma.Decimal | null;
            cnicPhoto: string | null;
            isSignUpVerified: boolean;
            createdAt: Date;
            updatedAt: Date;
        };
    } & {
        id: number;
        name: string;
        ownerId: number;
        carPicture: string | null;
        carPublished: Date;
        city: string | null;
        registrationNo: string | null;
        type: string | null;
        makeYear: string | null;
        capacity: number | null;
        Make: string | null;
        fuelType: import(".prisma/client").$Enums.FuelType | null;
        insured: boolean | null;
        rentPerDay: number | null;
        insuranceRequired: boolean | null;
        carTransmission: import(".prisma/client").$Enums.CarTransmission | null;
        averageRating: Prisma.Decimal | null;
        ratingCount: number | null;
        weightage: Prisma.Decimal | null;
        createdAt: Date;
        updatedAt: Date;
    }>;
    update(userId: number, id: number, updateCarDto: UpdateCarDto): Promise<{
        bookings: {
            id: number;
            clientId: number;
            carId: number;
            driverId: number | null;
            status: import(".prisma/client").$Enums.BookingStatus;
            isInsured: boolean | null;
            insurance: string | null;
            bookingDate: Date;
            startDate: Date;
            endDate: Date;
            totalPrice: number;
            isPaid: boolean | null;
            amountPaid: number | null;
            cancelledAt: Date | null;
            cancelledById: number | null;
            clientContactNo: string | null;
            createdAt: Date;
            updatedAt: Date;
        }[];
        _count: {
            bookings: number;
            owner: number;
            ratings: number;
        };
        ratings: {
            id: number;
            ratedById: number;
            driverId: number | null;
            bookingId: number;
            carId: number;
            rating: Prisma.Decimal;
            review: string | null;
            createdAt: Date;
            updatedAt: Date;
        }[];
        owner: {
            id: number;
            fullName: string | null;
            email: string;
            password: string;
            isVerified: boolean;
            role: string;
            profilePicture: string | null;
            cnic: string | null;
            phone: string | null;
            dob: Date | null;
            otp: number | null;
            averageRatingGiven: Prisma.Decimal | null;
            ratingCount: number | null;
            weightage: Prisma.Decimal | null;
            cnicPhoto: string | null;
            isSignUpVerified: boolean;
            createdAt: Date;
            updatedAt: Date;
        };
    } & {
        id: number;
        name: string;
        ownerId: number;
        carPicture: string | null;
        carPublished: Date;
        city: string | null;
        registrationNo: string | null;
        type: string | null;
        makeYear: string | null;
        capacity: number | null;
        Make: string | null;
        fuelType: import(".prisma/client").$Enums.FuelType | null;
        insured: boolean | null;
        rentPerDay: number | null;
        insuranceRequired: boolean | null;
        carTransmission: import(".prisma/client").$Enums.CarTransmission | null;
        averageRating: Prisma.Decimal | null;
        ratingCount: number | null;
        weightage: Prisma.Decimal | null;
        createdAt: Date;
        updatedAt: Date;
    }>;
    remove(id: number): string;
}
